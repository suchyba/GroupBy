// <auto-generated />
using System;
using GroupBy.Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GroupBy.Data.Migrations
{
    [DbContext(typeof(GroupByDbContext))]
    [Migration("20210506104221_FinancialRecordUpdate")]
    partial class FinancialRecordUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AgreementVolunteer", b =>
                {
                    b.Property<int>("AgreementsId")
                        .HasColumnType("int");

                    b.Property<int>("VolunteersAcceptedId")
                        .HasColumnType("int");

                    b.HasKey("AgreementsId", "VolunteersAcceptedId");

                    b.HasIndex("VolunteersAcceptedId");

                    b.ToTable("AgreementVolunteer");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.AccountingBook", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("BookOrderNumberId")
                        .HasColumnType("int");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelatedGroupId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "BookOrderNumberId");

                    b.HasIndex("RelatedGroupId");

                    b.ToTable("AccountingBooks");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Agreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Agreements");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Element", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RelatedProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RelatedProjectId");

                    b.ToTable("Elements");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Element");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.FinancialRecord", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("BookOrderNumberId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelatedDocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedProjectId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "BookOrderNumberId", "Id");

                    b.HasIndex("RelatedDocumentId");

                    b.HasIndex("RelatedProjectId");

                    b.ToTable("FinancialRecords");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FinancialRecord");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentGroupId");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasFilter("[ProjectId] IS NOT NULL");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.GroupsPermissions", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<bool?>("Books")
                        .HasColumnType("bit");

                    b.Property<bool?>("EditElements")
                        .HasColumnType("bit");

                    b.Property<bool?>("EditMembers")
                        .HasColumnType("bit");

                    b.Property<bool?>("EditPosition")
                        .HasColumnType("bit");

                    b.Property<bool?>("Invitation")
                        .HasColumnType("bit");

                    b.Property<bool?>("Resolutions")
                        .HasColumnType("bit");

                    b.Property<bool?>("SeeElements")
                        .HasColumnType("bit");

                    b.Property<bool?>("Subgroups")
                        .HasColumnType("bit");

                    b.HasKey("GroupId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.IdentityModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("VolunteerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("VolunteerId")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.InventoryBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GroupId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .IsUnique();

                    b.ToTable("InventoryBooks");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.InventoryBookRecord", b =>
                {
                    b.Property<int>("InventoryBookId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Income")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.HasKey("InventoryBookId", "Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("SourceId");

                    b.ToTable("InventoryBookRecords");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.InventoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descryption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.InventoryItemSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InventoryItemSources");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.InvitationToGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InvitedId")
                        .HasColumnType("int");

                    b.Property<int?>("InviterId")
                        .HasColumnType("int");

                    b.Property<int?>("TargetGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvitedId");

                    b.HasIndex("InviterId");

                    b.HasIndex("TargetGroupId");

                    b.ToTable("InvitationToGroups");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("HigherPositionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HigherPositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.PositionRecord", b =>
                {
                    b.Property<int>("VolunteerId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("AppointingResolutionGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("AppointingResolutionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DismissDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DismissingResolutionGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("DismissingResolutionId")
                        .HasColumnType("int");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedGroupId")
                        .HasColumnType("int");

                    b.HasKey("VolunteerId", "Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("RelatedGroupId");

                    b.HasIndex("AppointingResolutionGroupId", "AppointingResolutionId");

                    b.HasIndex("DismissingResolutionGroupId", "DismissingResolutionId");

                    b.ToTable("PositionRecords");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Independent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("ParentGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentGroupId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("HigherRankId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HigherRankId");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.RegistrationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("TargetGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("TargetRankId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TargetGroupId");

                    b.HasIndex("TargetRankId");

                    b.ToTable("RegistrationCodes");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Resolution", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LegislatorId")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupId", "Id");

                    b.HasIndex("LegislatorId");

                    b.ToTable("Resolutions");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.TODOListElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AsigneeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int?>("TODOListElementId")
                        .HasColumnType("int");

                    b.Property<int?>("TODOListId")
                        .HasColumnType("int");

                    b.Property<string>("Task")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AsigneeId");

                    b.HasIndex("TODOListElementId");

                    b.HasIndex("TODOListId");

                    b.ToTable("TODOListElements");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Volunteer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RankId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RankId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("GroupVolunteer", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.Property<int>("MembersId")
                        .HasColumnType("int");

                    b.HasKey("GroupsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("GroupVolunteer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RemainderVolunteer", b =>
                {
                    b.Property<int>("RemaindersId")
                        .HasColumnType("int");

                    b.Property<int>("VolunteersAcceptedId")
                        .HasColumnType("int");

                    b.HasKey("RemaindersId", "VolunteersAcceptedId");

                    b.HasIndex("VolunteersAcceptedId");

                    b.ToTable("RemainderVolunteer");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Document", b =>
                {
                    b.HasBaseType("GroupBy.Domain.Entities.Element");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Document");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Remainder", b =>
                {
                    b.HasBaseType("GroupBy.Domain.Entities.Element");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Remainder");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.TODOList", b =>
                {
                    b.HasBaseType("GroupBy.Domain.Entities.Element");

                    b.HasDiscriminator().HasValue("TODOList");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.FinancialIncomeRecord", b =>
                {
                    b.HasBaseType("GroupBy.Domain.Entities.FinancialRecord");

                    b.Property<decimal?>("Dotation")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("EarningAction")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("MembershipFee")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("OnePercent")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Other")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("FinancialIncomeRecord_Other");

                    b.Property<decimal?>("ProgramFee")
                        .HasColumnType("decimal(10,2)");

                    b.HasDiscriminator().HasValue("FinancialIncomeRecord");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.FinancialOutcomeRecord", b =>
                {
                    b.HasBaseType("GroupBy.Domain.Entities.FinancialRecord");

                    b.Property<decimal?>("Accommodation")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Food")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Insurance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Inventory")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Material")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Other")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Service")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Transport")
                        .HasColumnType("decimal(10,2)");

                    b.HasDiscriminator().HasValue("FinancialOutcomeRecord");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.AccountingDocument", b =>
                {
                    b.HasBaseType("GroupBy.Domain.Entities.Document");

                    b.HasDiscriminator().HasValue("AccountingDocument");
                });

            modelBuilder.Entity("AgreementVolunteer", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.Agreement", null)
                        .WithMany()
                        .HasForeignKey("AgreementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupBy.Domain.Entities.Volunteer", null)
                        .WithMany()
                        .HasForeignKey("VolunteersAcceptedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.AccountingBook", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.Group", "RelatedGroup")
                        .WithMany("AccountingBooks")
                        .HasForeignKey("RelatedGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedGroup");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Element", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.Group", "Group")
                        .WithMany("Elements")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("GroupBy.Domain.Entities.Project", "RelatedProject")
                        .WithMany()
                        .HasForeignKey("RelatedProjectId");

                    b.Navigation("Group");

                    b.Navigation("RelatedProject");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.FinancialRecord", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.AccountingDocument", "RelatedDocument")
                        .WithMany("RelatedRecords")
                        .HasForeignKey("RelatedDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupBy.Domain.Entities.Project", "RelatedProject")
                        .WithMany("RelatedFinnancialRecords")
                        .HasForeignKey("RelatedProjectId");

                    b.HasOne("GroupBy.Domain.Entities.AccountingBook", "Book")
                        .WithMany("Records")
                        .HasForeignKey("BookId", "BookOrderNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("RelatedDocument");

                    b.Navigation("RelatedProject");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Group", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.Volunteer", "Owner")
                        .WithMany("OwnedGroups")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GroupBy.Domain.Entities.Group", "ParentGroup")
                        .WithMany("ChildGroups")
                        .HasForeignKey("ParentGroupId");

                    b.HasOne("GroupBy.Domain.Entities.Project", "RelatedProject")
                        .WithOne("ProjectGroup")
                        .HasForeignKey("GroupBy.Domain.Entities.Group", "ProjectId");

                    b.Navigation("Owner");

                    b.Navigation("ParentGroup");

                    b.Navigation("RelatedProject");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.GroupsPermissions", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.Group", "Group")
                        .WithMany("Permissions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupBy.Domain.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.IdentityModel", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.Volunteer", "RelatedVolunteer")
                        .WithOne("Identity")
                        .HasForeignKey("GroupBy.Domain.Entities.IdentityModel", "VolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedVolunteer");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.InventoryBook", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.Group", "RelatedGroup")
                        .WithOne("InventoryBook")
                        .HasForeignKey("GroupBy.Domain.Entities.InventoryBook", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedGroup");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.InventoryBookRecord", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.InventoryBook", "Book")
                        .WithMany("Records")
                        .HasForeignKey("InventoryBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupBy.Domain.Entities.InventoryItem", "Item")
                        .WithMany("History")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupBy.Domain.Entities.InventoryItemSource", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Book");

                    b.Navigation("Item");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.InvitationToGroup", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.Volunteer", "Invited")
                        .WithMany("InvitationsToGroup")
                        .HasForeignKey("InvitedId");

                    b.HasOne("GroupBy.Domain.Entities.Volunteer", "Inviter")
                        .WithMany("YourInvitations")
                        .HasForeignKey("InviterId");

                    b.HasOne("GroupBy.Domain.Entities.Group", "TargetGroup")
                        .WithMany()
                        .HasForeignKey("TargetGroupId");

                    b.Navigation("Invited");

                    b.Navigation("Inviter");

                    b.Navigation("TargetGroup");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Position", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.Position", "HigherPosition")
                        .WithMany()
                        .HasForeignKey("HigherPositionId");

                    b.Navigation("HigherPosition");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.PositionRecord", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("GroupBy.Domain.Entities.Group", "RelatedGroup")
                        .WithMany()
                        .HasForeignKey("RelatedGroupId");

                    b.HasOne("GroupBy.Domain.Entities.Volunteer", "Person")
                        .WithMany("PositionHistory")
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupBy.Domain.Entities.Resolution", "AppointingResolution")
                        .WithMany()
                        .HasForeignKey("AppointingResolutionGroupId", "AppointingResolutionId");

                    b.HasOne("GroupBy.Domain.Entities.Resolution", "DismissingResolution")
                        .WithMany()
                        .HasForeignKey("DismissingResolutionGroupId", "DismissingResolutionId");

                    b.Navigation("AppointingResolution");

                    b.Navigation("DismissingResolution");

                    b.Navigation("Person");

                    b.Navigation("Position");

                    b.Navigation("RelatedGroup");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Project", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.Volunteer", "Owner")
                        .WithMany("OwnedProjects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupBy.Domain.Entities.Group", "ParentGroup")
                        .WithMany("ProjectsRealisedInGroup")
                        .HasForeignKey("ParentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("ParentGroup");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Rank", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.Rank", "HigherRank")
                        .WithMany()
                        .HasForeignKey("HigherRankId");

                    b.Navigation("HigherRank");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.RegistrationCode", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.Volunteer", "Owner")
                        .WithMany("RegistrationCodes")
                        .HasForeignKey("OwnerId");

                    b.HasOne("GroupBy.Domain.Entities.Group", "TargetGroup")
                        .WithMany()
                        .HasForeignKey("TargetGroupId");

                    b.HasOne("GroupBy.Domain.Entities.Rank", "TargetRank")
                        .WithMany()
                        .HasForeignKey("TargetRankId");

                    b.Navigation("Owner");

                    b.Navigation("TargetGroup");

                    b.Navigation("TargetRank");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Resolution", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.Group", "Group")
                        .WithMany("Resolutions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupBy.Domain.Entities.Volunteer", "Legislator")
                        .WithMany()
                        .HasForeignKey("LegislatorId");

                    b.Navigation("Group");

                    b.Navigation("Legislator");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.TODOListElement", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.Volunteer", "Asignee")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AsigneeId");

                    b.HasOne("GroupBy.Domain.Entities.TODOListElement", null)
                        .WithMany("SubTasks")
                        .HasForeignKey("TODOListElementId");

                    b.HasOne("GroupBy.Domain.Entities.TODOList", null)
                        .WithMany("List")
                        .HasForeignKey("TODOListId");

                    b.Navigation("Asignee");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Volunteer", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.Rank", "Rank")
                        .WithMany("VolunteersRanked")
                        .HasForeignKey("RankId");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("GroupVolunteer", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupBy.Domain.Entities.Volunteer", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.IdentityModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.IdentityModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupBy.Domain.Entities.IdentityModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.IdentityModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RemainderVolunteer", b =>
                {
                    b.HasOne("GroupBy.Domain.Entities.Remainder", null)
                        .WithMany()
                        .HasForeignKey("RemaindersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupBy.Domain.Entities.Volunteer", null)
                        .WithMany()
                        .HasForeignKey("VolunteersAcceptedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.AccountingBook", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Group", b =>
                {
                    b.Navigation("AccountingBooks");

                    b.Navigation("ChildGroups");

                    b.Navigation("Elements");

                    b.Navigation("InventoryBook");

                    b.Navigation("Permissions");

                    b.Navigation("ProjectsRealisedInGroup");

                    b.Navigation("Resolutions");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.InventoryBook", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.InventoryItem", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Project", b =>
                {
                    b.Navigation("ProjectGroup")
                        .IsRequired();

                    b.Navigation("RelatedFinnancialRecords");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Rank", b =>
                {
                    b.Navigation("VolunteersRanked");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.TODOListElement", b =>
                {
                    b.Navigation("SubTasks");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.Volunteer", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("Identity");

                    b.Navigation("InvitationsToGroup");

                    b.Navigation("OwnedGroups");

                    b.Navigation("OwnedProjects");

                    b.Navigation("PositionHistory");

                    b.Navigation("RegistrationCodes");

                    b.Navigation("YourInvitations");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.TODOList", b =>
                {
                    b.Navigation("List");
                });

            modelBuilder.Entity("GroupBy.Domain.Entities.AccountingDocument", b =>
                {
                    b.Navigation("RelatedRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
